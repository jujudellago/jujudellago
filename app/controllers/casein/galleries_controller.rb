# Scaffolding generated by Casein v.3.1.7

module Casein
  class GalleriesController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
    layout 'constellation'    
    respond_to :html,:js,:xml
    helper_method :sort_column, :sort_direction
  
  
  
  
    def index
      per_page=params[:per_page]||=10
  		@galleries = Gallery.search(params[:search]).order(sort_column + " " + sort_direction).paginate(:per_page =>per_page, :page => params[:page])
  		respond_with(@galleries)
    end


    
    
  
    def show
      
      @gallery = Gallery.find params[:id]
    end
 
    def new
      
    	@gallery = Gallery.new
    end

    def create
      @gallery = Gallery.new params[:gallery]
    
      if @gallery.save
        flash[:notice] = 'Gallery created'
        redirect_to casein_galleries_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new gallery'
        render :action => :new
      end
    end
  
    def update
      
      
      @gallery = Gallery.find params[:id]
    
      if @gallery.update_attributes params[:gallery]
        flash[:notice] = 'Gallery has been updated'
        redirect_to casein_galleries_path
      else
        flash.now[:warning] = 'There were problems when trying to update this gallery'
        render :action => :show
      end
    end
 
    def destroy
      @gallery = Gallery.find params[:id]

      @gallery.destroy
      flash[:notice] = 'Gallery has been deleted'
      redirect_to casein_galleries_path
    end
    def flush
       @gallery = Gallery.find params[:id]
        call_rake "yabo:flush_pictures", { :gallery_id=>@gallery.id.to_s}
        flash[:notice] = 'All pictures are being destroyed (will take a little while)'
        respond_with @gallery
    end
    
    
      def enabledisable
        @gallery = Gallery.find params[:id]
        enbl=params[:enabled]

        if @gallery.update_attribute(:enabled,enbl )
          if enbl
            message = "@gallery published, it is visible now"          
          else
            message = "@gallery un-published, it is hidden now"
          end
        else
          message = "There was a problem setting enabled status this @gallery."
        end
        flash[:notice] = message
      	respond_with(@gallery)
      end
  
     private

        def sort_column
          Gallery.column_names.include?(params[:sort]) ? params[:sort] : "name"
        end

        def sort_direction
          %w[asc desc].include?(params[:direction]) ? params[:direction] : "asc"
        end
  
  
  
  
  end
end