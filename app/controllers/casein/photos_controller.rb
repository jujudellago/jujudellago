# Scaffolding generated by Casein v.3.1.7

module Casein
  class PhotosController < Casein::CaseinController
      layout 'constellation'
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
    before_filter :get_gallery_id
    respond_to :html,:js
    
    def index
      @casein_page_title = 'Photos'
  		@photos = @gallery.photos.paginate :order=>'position', :page => params[:page]
  		respond_with @photos
    end
  
    def show
      @casein_page_title = 'View photo'
      @photo = Photo.find params[:id]
    end
 
    def new
      @casein_page_title = 'Add a new photo'
    	@photo = Photo.new
    end
    def import
        @public_path = File.join(Rails.root.to_s, 'public')
        @uploads_url = '/galleries/imports'
        @upload_path = File.join(@public_path, @uploads_url)
        @current_url = params[:dir] || @uploads_url
        @current_path = File.join(@public_path, @current_url)+ '/*'
        @photo_names=@gallery.photos.map(&:image_file_name)
        
        if params[:import] && params[:import]=="yes"
            call_rake "yabo:import_pictures", {:import_folder=>params[:dir], :gallery_id=>@gallery.id.to_s}
            flash[:notice] = 'Import in progress'
          end
            
             #IMPORT_FOLDER=/galleries/imports/dams GALLERY_ID=2 --trace

        
          @dirs = []
          @files = []
          Dir.glob(@current_path).sort.each do |file|

            file_obj = {
                :url => file.gsub(@public_path, ''),
                :name => File.basename(file),
                :imported=>@photo_names.include?(File.basename(file)) 
              }
            if File.directory?(file)
              @dirs << file_obj
            else
              file_obj.merge!({

                :type => ['gif','jpg','jpeg','png'].index(File.extname(file).downcase[1..-1]) ? :image : :file,
                :icon => '/casein/images/icons/file.png',
              })
              puts file_obj[:type]
              if file_obj[:type] == :image
                file_obj[:icon] = file_obj[:url]
              end
              @files << file_obj
            end
          end

          @breadcrumb = []
          curr_crumb = ''
          @current_url.each(File::SEPARATOR) do |crumb|
            crumb.gsub!('/', '')
            if crumb != ''
              curr_crumb += File::SEPARATOR + crumb
              puts curr_crumb
              @breadcrumb << {
                :name => crumb,
                :url => curr_crumb,
              }
            end
          end
          
  
    end
    
    

    def create
      @photo = @gallery.photos.new params[:photo]
    
      if @photo.save
        flash[:notice] = 'Photo created'
        redirect_to casein_gallery_photos_path(@gallery)
      else
        flash.now[:warning] = 'There were problems when trying to create a new photo'
        render :action => :new
      end
    end
    def set_default
       @photo = Photo.find params[:id]
       @gallery.default_photo_id=@photo.id
       if @gallery.save
          flash[:notice] = 'Photo has been set as default'
          respond_with(@photo,:url=>casein_gallery_photos_path(@gallery))
        else
          flash.now[:warning] = 'There were problems when trying to set this photo as default'
          render :action => :show
        end
    end
  
    def update
      @casein_page_title = 'Update photo'
      
      @photo = Photo.find params[:id]
    
      if @photo.update_attributes params[:photo]
        flash[:notice] = 'Photo has been updated'
        redirect_to casein_gallery_photos_path(@gallery)
      else
        flash.now[:warning] = 'There were problems when trying to update this photo'
        render :action => :show
      end
    end
 
    def destroy
      @photo = Photo.find params[:id]

      @photo.destroy
      flash[:notice] = 'Photo has been deleted'
      #redirect_to casein_gallery_photos_path(@gallery)
      respond_with(@gallery)
    end
    
    private
    def get_gallery_id
      @gallery=Gallery.find(params[:gallery_id])
      
    end
  
  end
end