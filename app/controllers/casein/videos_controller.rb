# Scaffolding generated by Casein v.3.1.7

module Casein
  class VideosController < Casein::CaseinController
    layout 'constellation'
    ## optional filters for defining usage according to Casein::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
    respond_to :html,:js,:xml
    helper_method :sort_column, :sort_direction

    def index
      @casein_page_title = 'Videos'
      #@videos = Video.paginate :page => params[:page]
      per_page=params[:per_page]||=10

        
      @videos = Video.search(params[:search]).order(sort_column + " " + sort_direction).paginate(:per_page =>per_page, :page => params[:page])
      respond_with(@videos)
    end
    
    
    
    

    def show
      @casein_page_title = 'View video'
      @video = Video.find params[:id]
    end

    def new
      @casein_page_title = 'Add a new video'
      @video = Video.new
    end

    def create
      @video = Video.new params[:video]

      if @video.save
        flash[:notice] = 'Video created'
        redirect_to casein_videos_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new video'
        render :action => :new
      end
    end

    def update
      @casein_page_title = 'Update video'

      @video = Video.find params[:id]

      if @video.update_attributes params[:video]
        flash[:notice] = 'Video has been updated'
        redirect_to casein_videos_path
      else
        flash.now[:warning] = 'There were problems when trying to update this video'
        render :action => :show
      end
    end

    def destroy
      @video = Video.find params[:id]

      @video.destroy
      flash[:notice] = 'Video has been deleted'
      redirect_to casein_videos_path
    end


    def enabledisable
      @video = Video.find params[:id]
      enbl=params[:enabled]

      if @video.update_attribute(:enabled,enbl )
        if enbl
          message = "video published, it is visible now"          
        else
          message = "video un-published, it is hidden now"
        end
      else
        message = "There was a problem setting enabled status this video."
      end
      flash[:notice] = message
      respond_with @video
    end
    
    private

      def sort_column
        Video.column_names.include?(params[:sort]) ? params[:sort] : "title"
      end

      def sort_direction
        %w[asc desc].include?(params[:direction]) ? params[:direction] : "asc"
      end
   
        


end
end